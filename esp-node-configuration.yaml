# Notes!
#
# 1. List of weather glyphs needed may not be complete
# 2. List of weather conditions may not be complete
#

# Define font and glyphs to be used in node
font:
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_weather
    size: 45
    glyphs: [
      "\U000F0599", # mdi-weather-sunny
      "\U000F0594", # mdi-weather-night
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F0597", # mdi:weather-rainy
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0F36", # mdi-weather-snowy-heavy
      "\U000F059E", # mdi-weather-windy-variant
      "\U000F0591", # mdi-weather-fog
      "\U000F0F31", # mdi-weather-night-partly-cloudy
      "\U000F0595", # mdi-weather-partly-cloudy
      ]

# Define text sensor
text_sensor:
  - platform: homeassistant
    id: fmi_forecast
    entity_id: sensor.fmi_forecast

# Define what is shown in display
display:
# stuff missing
    lambda: |-
      // Title of forecast part
      it.print(150, 100, id(font_bebas_36), TextAlign::TOP_CENTER, "Weather forecast");

      // FMI forecast data, in a string
      // Hour;Temperature;Condition;Precipitation x 4
      // Example "18;10.9;cloudy;0.0;21;10.2;rainy;0.2;0;9.5;rainy;0.1;3;8.9;rainy;0.6;"
      if(id(fmi_forecast).has_state()) {
        std::string str = id(fmi_forecast).state;
        ESP_LOGI("FMI Forecast", "%s", str.c_str());
        std::size_t current, previous = 0;
        char delim = ';';
        current = str.find(delim);
        int x = 45, y = 170;
        // Loop for four forecasts
        for (int i=0; i<4; i++) {
          // Loop for four forecast items
          for (int j=0; j<4; j++) {
            if (j==0) {
              // Add ".00" to the end of hour
              it.printf(x, y, id(font_arial), TextAlign::BASELINE_CENTER, "%s.00", str.substr(previous, current - previous).c_str());
            }
            else if (j==1) {
              // Add "°C" to the end of temp
              it.printf(x, y, id(font_arial), TextAlign::BASELINE_CENTER, "%s°C", str.substr(previous, current - previous).c_str());
            }
            else if (j==2) {
              // select correct weather glyph
              y += 20;
              std::map<std::string, std::string> weather_state { 
                { "clear-day", "\U000F0599" },             // mdi:weather-sunny
                { "clear-night", "\U000F0594" },           // mdi:weather-night
                { "cloudy", "\U000F0590" },                // mdi:weather-cloudy
                { "rain", "\U000F0596" },                  // mdi:weather-pouring
                { "rainy", "\U000F0597" },                  // mdi:weather-rainy
                { "sleet", "\U000F067F" },                 // mdi:weather-snowy-rainy
                { "snow", "\U000F0F36" },                  // mdi:weather-snowy-heavy
                { "wind", "\U000F059E" },                  // mdi:weather-windy-variant
                { "fog", "\U000F0591" },                   // mdi:weather-fog
                { "partly-cloudy-day", "\U000F0595" },     // mdi:weather-partly-cloudy
                { "partly-cloudy-night", "\U000F0F31" }    // mdi:weather-night-partly-cloudy
              };
              it.printf(x, y, id(font_weather), TextAlign::BASELINE_CENTER, "%s", weather_state[str.substr(previous, current - previous).c_str()].c_str());
            }
            else if (j==3) {
              // Add "mm" to the end of precipitation
              it.printf(x, y, id(font_arial), TextAlign::BASELINE_CENTER, "%smm", str.substr(previous, current - previous).c_str());
            }
            previous = current + 1; 
            current = str.find(delim, previous);
            y += 30;
          }  // end for-j
          y = 170;
          x += 70;
        } // end for-i
      } // end-if
      

